# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
  DEV_ENVIRONMENT: dev 

stages:
  - stage: TerraformValidate
    jobs:
      - job: TerraformValidateJob
        continueOnError: false  
        steps:
        - task: PublishPipelineArtifact@1
          displayName: Publish Artifacts
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/'
            artifact: 'Infra-Repo-Niaz-out'
            publishLocation: 'pipeline' 

        - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
          inputs:
            terraformVersion: 'latest'
        - task: TerraformCLI@0
          inputs:
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/'
            backendType: 'azurerm'
            backendServiceArm: 'terraform-aks-azurerm-svc-con'
            backendAzureRmSubscriptionId: '606e824b-aaf7-4b4e-9057-b459f6a4436d'
            ensureBackend: true
            backendAzureRmResourceGroupName: 'Capstonedemoniaz1'
            backendAzureRmResourceGroupLocation: 'East US'
            backendAzureRmStorageAccountName: 'infrarepo23tfstatefile'
            backendAzureRmStorageAccountSku: 'Standard_LRS'
            backendAzureRmContainerName: 'tfstatefileinfraniaz23'
            backendAzureRmKey: 'niaz-terraform-custom-vnet.tfstate'
            allowTelemetryCollection: false
        - task: TerraformCLI@0
          displayName: Terraform Validate
          inputs:
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/'
            allowTelemetryCollection: false
  - stage: DeployAKSClusters
    jobs:
    - deployment: DeployDevAKSCluster
      displayName: DeployDevAKSCluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(Dev_Environment)
      strategy: 
        runOnce:
          deploy:
            steps:
            - task: DownloadSecureFile@1
              displayName: Download SSH Key 
              name: sshkey 
              inputs:
                secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
            - task: TerraformCLI@0
              inputs:
                command: 'init'
                workingDirectory: '$(Pipeline.Workspace)/'
                backendType: 'azurerm'
                backendServiceArm: 'terraform-aks-azurerm-svc-con'
                ensureBackend: true
                backendAzureRmResourceGroupName: 'Stefans-Resource-Group'
                backendAzureRmResourceGroupLocation: 'East US'
                backendAzureRmStorageAccountName: 'tstatestorageniaz'
                backendAzureRmContainerName: 'capstonetfstatefile'
                backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              displayName: Terraform Plan
              inputs:
                command: 'plan'
                workingDirectory: '$(Pipeline.Workspace)/Infra-Repo-Niaz-out'
                environmentServiceName: 'terraform-aks-azurerm-svc-con'
                commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath)  -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/Infra-Repo-Niaz-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              displayName: Terraform Apply
              inputs:
                command: 'apply'
                workingDirectory: '$(Pipeline.Workspace)/Infra-Repo-Niaz-out'
                environmentServiceName: 'terraform-aks-azurerm-svc-con'
                commandOptions: '$(Pipeline.Workspace)/Infra-Repo-Niaz-ou/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: false